{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TIGRESS public data release DOI Welcome to the TIGRESS data release! This repo contains a series of python scripts and example jupyter notebooks that will help you read and analyse the TIGRESS simulation data. Data Download Full data can be downloaded via Globus . A few data files used in the tutorials is also available at this webpage . You can browse and download whole datasets as well as individual files. However, you will need to preserve the file structure (folders and sub-folders) for the scripts provided here to work properly. Currently, this data release only contains the solar neighborhood models, R8 , for selected snapshots with an interval of about 10 Myr after a quasi-steady state is reached. Full MHD snapshots for every 1 Myr are available upon request. Installation of scripts pip install astro_tigress The python scripts and example notebooks are available at the GitHub repository. git clone git@github.com:PrincetonUniversity/astro-tigress.git Quickstart import astro_tigress dir_master = ... # master path to your data model_id = \"R8_2pc\" model = astro_tigress . Model ( model_id , dir_master ) model . load ( 300 , \"MHD\" ) # make plots using yt import yt slc = yt . SlicePlot ( model . MHD . ytds , 'z' , fields = ( 'gas' , 'nH' )) slc . annotate_magnetic_field () Data types MHD : Small box (z=+-512 pc) original TIGRESS output for MHD variables including density, pressure, velocity (vector), and magnetic field (vector). Athena VTK format. MHD_PI : Full box (z=+-3072 pc) MHD data plus electron abundance as a result of UV radiation post-processing. Athena VTK format. chem : The chemistry post-processing small box output for molecular hydrogen and CO abundnaces. Athena++ HDF5 format. CO_lines : The CO lines, J(1-0) and J(2-1). RADMC-3D binary format. Note that the chemistry post-processing data is only available for R8-2pc . Tutorials Start with playing the jupyter notebooks notebooks/ , which contains examples for reading and analysing the data. read_data_1-MHD.ipynb shows you how to work with the original TIGRESS MHD output data ( Kim & Ostriker 2017 ). read_data_2-chem-CO_lines.ipynb gives examples working with the chemistry and CO line post-processing data ( Gong et al 2018 , Gong et al. 2020 ). read_data_3-MHD_PI.ipynb gives examples working with the full-box MHD output with post-processed electro abundance data ( Kado-Fong et al 2020 ). Further analysis Take a look at example notebooks showing how to construct synthetic HI PPV cube and dust polarization maps. example_1-synthetic-HI.ipynb example_2-synthetic-dustpol.ipynb License and Attribution If you make use of only MHD data, please cite Kim & Ostriker (2017) ( ADS , BibTex ) chem and/or CO_lines data, please also cite Gong et al. (2018) ( ADS , BibTex ) and Gong et al. (2020) ( ADS , BibTex ) MHD_PI , please also cite Kado-Fong et al. (2020) ( ADS , BibTex )","title":"Home"},{"location":"#tigress-public-data-release-doi","text":"Welcome to the TIGRESS data release! This repo contains a series of python scripts and example jupyter notebooks that will help you read and analyse the TIGRESS simulation data.","title":"TIGRESS public data release DOI "},{"location":"#data-download","text":"Full data can be downloaded via Globus . A few data files used in the tutorials is also available at this webpage . You can browse and download whole datasets as well as individual files. However, you will need to preserve the file structure (folders and sub-folders) for the scripts provided here to work properly. Currently, this data release only contains the solar neighborhood models, R8 , for selected snapshots with an interval of about 10 Myr after a quasi-steady state is reached. Full MHD snapshots for every 1 Myr are available upon request.","title":"Data Download"},{"location":"#installation-of-scripts","text":"pip install astro_tigress The python scripts and example notebooks are available at the GitHub repository. git clone git@github.com:PrincetonUniversity/astro-tigress.git","title":"Installation of scripts"},{"location":"#quickstart","text":"import astro_tigress dir_master = ... # master path to your data model_id = \"R8_2pc\" model = astro_tigress . Model ( model_id , dir_master ) model . load ( 300 , \"MHD\" ) # make plots using yt import yt slc = yt . SlicePlot ( model . MHD . ytds , 'z' , fields = ( 'gas' , 'nH' )) slc . annotate_magnetic_field ()","title":"Quickstart"},{"location":"#data-types","text":"MHD : Small box (z=+-512 pc) original TIGRESS output for MHD variables including density, pressure, velocity (vector), and magnetic field (vector). Athena VTK format. MHD_PI : Full box (z=+-3072 pc) MHD data plus electron abundance as a result of UV radiation post-processing. Athena VTK format. chem : The chemistry post-processing small box output for molecular hydrogen and CO abundnaces. Athena++ HDF5 format. CO_lines : The CO lines, J(1-0) and J(2-1). RADMC-3D binary format. Note that the chemistry post-processing data is only available for R8-2pc .","title":"Data types"},{"location":"#tutorials","text":"Start with playing the jupyter notebooks notebooks/ , which contains examples for reading and analysing the data. read_data_1-MHD.ipynb shows you how to work with the original TIGRESS MHD output data ( Kim & Ostriker 2017 ). read_data_2-chem-CO_lines.ipynb gives examples working with the chemistry and CO line post-processing data ( Gong et al 2018 , Gong et al. 2020 ). read_data_3-MHD_PI.ipynb gives examples working with the full-box MHD output with post-processed electro abundance data ( Kado-Fong et al 2020 ).","title":"Tutorials"},{"location":"#further-analysis","text":"Take a look at example notebooks showing how to construct synthetic HI PPV cube and dust polarization maps. example_1-synthetic-HI.ipynb example_2-synthetic-dustpol.ipynb","title":"Further analysis"},{"location":"#license-and-attribution","text":"If you make use of only MHD data, please cite Kim & Ostriker (2017) ( ADS , BibTex ) chem and/or CO_lines data, please also cite Gong et al. (2018) ( ADS , BibTex ) and Gong et al. (2020) ( ADS , BibTex ) MHD_PI , please also cite Kado-Fong et al. (2020) ( ADS , BibTex )","title":"License and Attribution"},{"location":"install/","text":"Installation pip install astro_tigress","title":"Installation"},{"location":"install/#installation","text":"pip install astro_tigress","title":"Installation"},{"location":"module/","text":"API References astro_tigress.Model Class containing the simulation model information. Parameters: Name Type Description Default model_id name of the model, e.g. R8_2pc . required Source code in astro_tigress/tigress_read.pyclass Model : \"\"\"Class containing the simulation model information. Parameters ---------- model_id: str name of the model, e.g. `R8_2pc`. \"\"\" def __init__ ( self , model_id , dir_master ): self . dir_master = dir_master self . model_id = model_id self . dir_model = osp . join ( dir_master , model_id , \"\" ) if osp . isdir ( self . dir_model ): subdirs = os . listdir ( self . dir_model ) ivtks = sorted ([ int ( x ) for x in subdirs if x . isnumeric ()]) self . ivtks = np . array ( ivtks ) #list of vtk numbers of outputs #contained data sets, e.g. [\"MHD\", \"chem\", \"CO_lines\"] self . data_sets = {} for ivtk in self . ivtks : dir_ivtk = \" {:s}{:04d} /\" . format ( self . dir_model , ivtk ) self . data_sets [ ivtk ] = os . listdir ( dir_ivtk ) self . _load_hst () self . _load_input () self . CO_lines = {} return def _load_hst ( self ): # check history file fn_hst = \" {:s} history/MHD/ {:s} .hst\" . format ( self . dir_model , self . model_id ) if osp . isfile ( fn_hst ): self . hst = athena_read . hst ( fn_hst ) self . fn_hst = fn_hst def _load_input ( self ): # read time output interval in input file fn_input_MHD = \" {:s} input/MHD/ {:s} .par\" . format ( self . dir_model , self . model_id ) #time units self . tunit = const . pc / const . km self . tunit_Myr = self . tunit / const . Myr if osp . isfile ( fn_input_MHD ): self . MHD_input = athena_read . athinput ( fn_input_MHD ) self . fn_input_MHD = fn_input_MHD for k in self . MHD_input . keys (): if k . startswith ( \"output\" ): if self . MHD_input [ k ][ \"out_fmt\" ] == \"vtk\" : self . dt_code = self . MHD_input [ k ][ \"dt\" ] self . dt_Myr = self . dt_code * self . tunit_Myr self . t_Myr = self . ivtks * self . dt_Myr def show ( self ): \"\"\"Print available data list\"\"\" print ( \"Avalable data:\" ) if hasattr ( self , 'fn_hst' ): print ( \" history\" ) if hasattr ( self , 'fn_input_MHD' ): print ( \" input\" ) for i in self . ivtks : print ( \" ivtk = {:d} \" . format ( i ), end = \" \" ) for d in self . data_sets [ i ]: print ( d , end = \" \" ) print ( \" \" ) def download ( self , ivtk = 300 , dataset = \"MHD\" , Z = 1. , iline = 1 ): \"\"\"Download simulation data from a certain data set. Parameters ---------- ivtk: int vtk output number dataset: str, [\"MHD\", \"chem\", \"CO_lines\", \"history\", \"input\", \"all\"] name of the dataset or download all. Z: float, [0.5, 1, 2] metallicity for chemistry post-processing. iline: int, [1, 2] uppper level of CO rotational line. 1 for J=1-0, 2 for J=2-1 \"\"\" fn = self . _set_filename ( ivtk , Z = Z , iline = iline ) if dataset == \"all\" : for d , f in fn . items (): self . _download_file ( f ) else : for d in np . atleast_1d ( dataset ): self . _download_file ( fn [ dataset ]) def load ( self , ivtk , dataset = \"MHD\" , Z = 1. , iline = 1 , Tdect = 0. ): \"\"\"Load simulation data from a certain data set. Parameters ---------- ivtk: int vtk output number dataset: str or list, [\"MHD\", \"chem\", \"CO_lines\", \"MHD_PI\", \"all\"] name of the dataset or load all. Z: float, [0.5, 1, 2] metallicity for chemistry post-processing. iline: int, [1, 2] uppper level of CO rotational line. 1 for J=1-0, 2 for J=2-1 Tdect: float detection limit for atenna temperature in K for each velocity channel. \"\"\" fn = self . _set_filename ( ivtk , Z = Z , iline = iline , add_master = True ) if dataset == \"all\" : for d in self . data_sets [ ivtk ]: self . _loadone ( fn [ d ], d , iline = iline , Tdect = Tdect ) else : for d in np . atleast_1d ( dataset ): self . _loadone ( fn [ d ], d , iline = iline , Tdect = Tdect ) def _loadone ( self , f , d , iline = 1 , Tdect = 0. ): if d == \"MHD\" : self . MHD = DataMHD ( f ) elif d == \"chem\" : self . chem = DataChem ( f ) elif d == \"CO_lines\" : self . CO_lines [ iline ] = DataCO ( f , iline , Tdect ) elif d == \"MHD_PI\" : self . MHD_PI = DataRad ( f ) else : msg = \"ERROR: Model.load(): dataset name not recogonozed. \\n \" msg += 'dataset: {\"MHD\", \"chem\", \"CO_lines\", \"MHD_PI\"}' raise RuntimeError ( msg ) def _set_filename ( self , ivtk , Z = 1. , iline = 1 , add_master = False ): source_dir_ivtk = \" {:s} / {:04d} /\" . format ( self . model_id , ivtk ) if add_master : source_dir_ivtk = osp . join ( self . dir_master , source_dir_ivtk ) dict_Z = { 0.5 : \"Z05\" , 1. : \"Z1\" , 2. : \"Z2\" } Z_id = dict_Z [ Z ] fn = dict () fn [ 'MHD' ] = \" {:s} MHD/ {:s} . {:04d} .vtk\" . format ( source_dir_ivtk , self . model_id , ivtk ) fn [ 'MHD_PI' ] = \" {:s} MHD_PI/ {:s} . {:04d} .vtk\" . format ( source_dir_ivtk , self . model_id , ivtk ) fn [ 'chem' ] = \" {:s} chem/ {:s} / {:s} - {:s} . {:04d} .athdf\" . format ( source_dir_ivtk , Z_id , self . model_id , Z_id , ivtk ) fn [ 'CO_lines' ] = \" {:s} CO_lines/ {:s} /il {:d} / {:s} - {:s} .il {:d} . {:04d} .bout\" . format ( source_dir_ivtk , Z_id , iline , self . model_id , Z_id , iline , ivtk ) fn [ 'history' ] = \" {0:s} /history/MHD/ {0:s} .hst\" . format ( self . model_id ) fn [ 'input' ] = \" {0:s} /input/MHD/ {0:s} .par\" . format ( self . model_id ) return fn def _download_file ( self , f ): import urllib.request from urllib.error import URLError import shutil target = osp . join ( self . dir_master , f ) if osp . isfile ( target ): print ( \" {} ( {:.5f} GB) already exists\" . format ( f , osp . getsize ( target ) / 2 ** 30 )) while True : answer = input ( \"overwrite? [y/n]:\" ) if answer . lower () in [ 'y' , 'n' ]: break if answer . lower () == 'n' : return os . makedirs ( osp . dirname ( target ), exist_ok = True ) url = 'https://tigress-web.princeton.edu/~munan/astro-tigress/' source = url + f req = urllib . request . Request ( source ) try : response = urllib . request . urlopen ( req ) except URLError as e : if hasattr ( e , 'reason' ): print ( 'We failed to reach a server.' ) print ( 'Reason: ' , e . reason ) elif hasattr ( e , 'code' ): print ( 'The server couldn \\' t fulfill the request.' ) print ( 'Error code: ' , e . code ) else : print ( \"We reached \" , url ) print ( \" downloading...\" , osp . basename ( source ), end = \" \" ) with urllib . request . urlopen ( source ) as response , \\ open ( target , 'wb' ) as target : shutil . copyfileobj ( response , target ) #urllib.request.urlretrieve(source,target) print ( \" complete!\" ) download ( ivtk = 300 , dataset = 'MHD' , Z = 1.0 , iline = 1 ) Download simulation data from a certain data set. Parameters: Name Type Description Default ivtk vtk output number 300 dataset name of the dataset or download all. 'MHD' Z metallicity for chemistry post-processing. 1.0 iline uppper level of CO rotational line. 1 for J=1-0, 2 for J=2-1 1 Source code in astro_tigress/tigress_read.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 def download ( self , ivtk = 300 , dataset = \"MHD\" , Z = 1. , iline = 1 ): \"\"\"Download simulation data from a certain data set. Parameters ---------- ivtk: int vtk output number dataset: str, [\"MHD\", \"chem\", \"CO_lines\", \"history\", \"input\", \"all\"] name of the dataset or download all. Z: float, [0.5, 1, 2] metallicity for chemistry post-processing. iline: int, [1, 2] uppper level of CO rotational line. 1 for J=1-0, 2 for J=2-1 \"\"\" fn = self . _set_filename ( ivtk , Z = Z , iline = iline ) if dataset == \"all\" : for d , f in fn . items (): self . _download_file ( f ) else : for d in np . atleast_1d ( dataset ): self . _download_file ( fn [ dataset ]) load ( ivtk , dataset = 'MHD' , Z = 1.0 , iline = 1 , Tdect = 0.0 ) Load simulation data from a certain data set. Parameters: Name Type Description Default ivtk vtk output number required dataset name of the dataset or load all. 'MHD' Z metallicity for chemistry post-processing. 1.0 iline uppper level of CO rotational line. 1 for J=1-0, 2 for J=2-1 1 Tdect detection limit for atenna temperature in K for each velocity channel. 0.0 Source code in astro_tigress/tigress_read.py 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 def load ( self , ivtk , dataset = \"MHD\" , Z = 1. , iline = 1 , Tdect = 0. ): \"\"\"Load simulation data from a certain data set. Parameters ---------- ivtk: int vtk output number dataset: str or list, [\"MHD\", \"chem\", \"CO_lines\", \"MHD_PI\", \"all\"] name of the dataset or load all. Z: float, [0.5, 1, 2] metallicity for chemistry post-processing. iline: int, [1, 2] uppper level of CO rotational line. 1 for J=1-0, 2 for J=2-1 Tdect: float detection limit for atenna temperature in K for each velocity channel. \"\"\" fn = self . _set_filename ( ivtk , Z = Z , iline = iline , add_master = True ) if dataset == \"all\" : for d in self . data_sets [ ivtk ]: self . _loadone ( fn [ d ], d , iline = iline , Tdect = Tdect ) else : for d in np . atleast_1d ( dataset ): self . _loadone ( fn [ d ], d , iline = iline , Tdect = Tdect ) show () Print available data list Source code in astro_tigress/tigress_read.py 63 64 65 66 67 68 69 70 71 72 73 74 def show ( self ): \"\"\"Print available data list\"\"\" print ( \"Avalable data:\" ) if hasattr ( self , 'fn_hst' ): print ( \" history\" ) if hasattr ( self , 'fn_input_MHD' ): print ( \" input\" ) for i in self . ivtks : print ( \" ivtk = {:d} \" . format ( i ), end = \" \" ) for d in self . data_sets [ i ]: print ( d , end = \" \" ) print ( \" \" )","title":"API References"},{"location":"module/#api-references","text":"","title":"API References"},{"location":"module/#astro_tigress.Model","text":"Class containing the simulation model information. Parameters: Name Type Description Default model_id name of the model, e.g. R8_2pc . required Source code in astro_tigress/tigress_read.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 class Model : \"\"\"Class containing the simulation model information. Parameters ---------- model_id: str name of the model, e.g. `R8_2pc`. \"\"\" def __init__ ( self , model_id , dir_master ): self . dir_master = dir_master self . model_id = model_id self . dir_model = osp . join ( dir_master , model_id , \"\" ) if osp . isdir ( self . dir_model ): subdirs = os . listdir ( self . dir_model ) ivtks = sorted ([ int ( x ) for x in subdirs if x . isnumeric ()]) self . ivtks = np . array ( ivtks ) #list of vtk numbers of outputs #contained data sets, e.g. [\"MHD\", \"chem\", \"CO_lines\"] self . data_sets = {} for ivtk in self . ivtks : dir_ivtk = \" {:s}{:04d} /\" . format ( self . dir_model , ivtk ) self . data_sets [ ivtk ] = os . listdir ( dir_ivtk ) self . _load_hst () self . _load_input () self . CO_lines = {} return def _load_hst ( self ): # check history file fn_hst = \" {:s} history/MHD/ {:s} .hst\" . format ( self . dir_model , self . model_id ) if osp . isfile ( fn_hst ): self . hst = athena_read . hst ( fn_hst ) self . fn_hst = fn_hst def _load_input ( self ): # read time output interval in input file fn_input_MHD = \" {:s} input/MHD/ {:s} .par\" . format ( self . dir_model , self . model_id ) #time units self . tunit = const . pc / const . km self . tunit_Myr = self . tunit / const . Myr if osp . isfile ( fn_input_MHD ): self . MHD_input = athena_read . athinput ( fn_input_MHD ) self . fn_input_MHD = fn_input_MHD for k in self . MHD_input . keys (): if k . startswith ( \"output\" ): if self . MHD_input [ k ][ \"out_fmt\" ] == \"vtk\" : self . dt_code = self . MHD_input [ k ][ \"dt\" ] self . dt_Myr = self . dt_code * self . tunit_Myr self . t_Myr = self . ivtks * self . dt_Myr def show ( self ): \"\"\"Print available data list\"\"\" print ( \"Avalable data:\" ) if hasattr ( self , 'fn_hst' ): print ( \" history\" ) if hasattr ( self , 'fn_input_MHD' ): print ( \" input\" ) for i in self . ivtks : print ( \" ivtk = {:d} \" . format ( i ), end = \" \" ) for d in self . data_sets [ i ]: print ( d , end = \" \" ) print ( \" \" ) def download ( self , ivtk = 300 , dataset = \"MHD\" , Z = 1. , iline = 1 ): \"\"\"Download simulation data from a certain data set. Parameters ---------- ivtk: int vtk output number dataset: str, [\"MHD\", \"chem\", \"CO_lines\", \"history\", \"input\", \"all\"] name of the dataset or download all. Z: float, [0.5, 1, 2] metallicity for chemistry post-processing. iline: int, [1, 2] uppper level of CO rotational line. 1 for J=1-0, 2 for J=2-1 \"\"\" fn = self . _set_filename ( ivtk , Z = Z , iline = iline ) if dataset == \"all\" : for d , f in fn . items (): self . _download_file ( f ) else : for d in np . atleast_1d ( dataset ): self . _download_file ( fn [ dataset ]) def load ( self , ivtk , dataset = \"MHD\" , Z = 1. , iline = 1 , Tdect = 0. ): \"\"\"Load simulation data from a certain data set. Parameters ---------- ivtk: int vtk output number dataset: str or list, [\"MHD\", \"chem\", \"CO_lines\", \"MHD_PI\", \"all\"] name of the dataset or load all. Z: float, [0.5, 1, 2] metallicity for chemistry post-processing. iline: int, [1, 2] uppper level of CO rotational line. 1 for J=1-0, 2 for J=2-1 Tdect: float detection limit for atenna temperature in K for each velocity channel. \"\"\" fn = self . _set_filename ( ivtk , Z = Z , iline = iline , add_master = True ) if dataset == \"all\" : for d in self . data_sets [ ivtk ]: self . _loadone ( fn [ d ], d , iline = iline , Tdect = Tdect ) else : for d in np . atleast_1d ( dataset ): self . _loadone ( fn [ d ], d , iline = iline , Tdect = Tdect ) def _loadone ( self , f , d , iline = 1 , Tdect = 0. ): if d == \"MHD\" : self . MHD = DataMHD ( f ) elif d == \"chem\" : self . chem = DataChem ( f ) elif d == \"CO_lines\" : self . CO_lines [ iline ] = DataCO ( f , iline , Tdect ) elif d == \"MHD_PI\" : self . MHD_PI = DataRad ( f ) else : msg = \"ERROR: Model.load(): dataset name not recogonozed. \\n \" msg += 'dataset: {\"MHD\", \"chem\", \"CO_lines\", \"MHD_PI\"}' raise RuntimeError ( msg ) def _set_filename ( self , ivtk , Z = 1. , iline = 1 , add_master = False ): source_dir_ivtk = \" {:s} / {:04d} /\" . format ( self . model_id , ivtk ) if add_master : source_dir_ivtk = osp . join ( self . dir_master , source_dir_ivtk ) dict_Z = { 0.5 : \"Z05\" , 1. : \"Z1\" , 2. : \"Z2\" } Z_id = dict_Z [ Z ] fn = dict () fn [ 'MHD' ] = \" {:s} MHD/ {:s} . {:04d} .vtk\" . format ( source_dir_ivtk , self . model_id , ivtk ) fn [ 'MHD_PI' ] = \" {:s} MHD_PI/ {:s} . {:04d} .vtk\" . format ( source_dir_ivtk , self . model_id , ivtk ) fn [ 'chem' ] = \" {:s} chem/ {:s} / {:s} - {:s} . {:04d} .athdf\" . format ( source_dir_ivtk , Z_id , self . model_id , Z_id , ivtk ) fn [ 'CO_lines' ] = \" {:s} CO_lines/ {:s} /il {:d} / {:s} - {:s} .il {:d} . {:04d} .bout\" . format ( source_dir_ivtk , Z_id , iline , self . model_id , Z_id , iline , ivtk ) fn [ 'history' ] = \" {0:s} /history/MHD/ {0:s} .hst\" . format ( self . model_id ) fn [ 'input' ] = \" {0:s} /input/MHD/ {0:s} .par\" . format ( self . model_id ) return fn def _download_file ( self , f ): import urllib.request from urllib.error import URLError import shutil target = osp . join ( self . dir_master , f ) if osp . isfile ( target ): print ( \" {} ( {:.5f} GB) already exists\" . format ( f , osp . getsize ( target ) / 2 ** 30 )) while True : answer = input ( \"overwrite? [y/n]:\" ) if answer . lower () in [ 'y' , 'n' ]: break if answer . lower () == 'n' : return os . makedirs ( osp . dirname ( target ), exist_ok = True ) url = 'https://tigress-web.princeton.edu/~munan/astro-tigress/' source = url + f req = urllib . request . Request ( source ) try : response = urllib . request . urlopen ( req ) except URLError as e : if hasattr ( e , 'reason' ): print ( 'We failed to reach a server.' ) print ( 'Reason: ' , e . reason ) elif hasattr ( e , 'code' ): print ( 'The server couldn \\' t fulfill the request.' ) print ( 'Error code: ' , e . code ) else : print ( \"We reached \" , url ) print ( \" downloading...\" , osp . basename ( source ), end = \" \" ) with urllib . request . urlopen ( source ) as response , \\ open ( target , 'wb' ) as target : shutil . copyfileobj ( response , target ) #urllib.request.urlretrieve(source,target) print ( \" complete!\" )","title":"Model"},{"location":"module/#astro_tigress.tigress_read.Model.download","text":"Download simulation data from a certain data set. Parameters: Name Type Description Default ivtk vtk output number 300 dataset name of the dataset or download all. 'MHD' Z metallicity for chemistry post-processing. 1.0 iline uppper level of CO rotational line. 1 for J=1-0, 2 for J=2-1 1 Source code in astro_tigress/tigress_read.py 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 def download ( self , ivtk = 300 , dataset = \"MHD\" , Z = 1. , iline = 1 ): \"\"\"Download simulation data from a certain data set. Parameters ---------- ivtk: int vtk output number dataset: str, [\"MHD\", \"chem\", \"CO_lines\", \"history\", \"input\", \"all\"] name of the dataset or download all. Z: float, [0.5, 1, 2] metallicity for chemistry post-processing. iline: int, [1, 2] uppper level of CO rotational line. 1 for J=1-0, 2 for J=2-1 \"\"\" fn = self . _set_filename ( ivtk , Z = Z , iline = iline ) if dataset == \"all\" : for d , f in fn . items (): self . _download_file ( f ) else : for d in np . atleast_1d ( dataset ): self . _download_file ( fn [ dataset ])","title":"download()"},{"location":"module/#astro_tigress.tigress_read.Model.load","text":"Load simulation data from a certain data set. Parameters: Name Type Description Default ivtk vtk output number required dataset name of the dataset or load all. 'MHD' Z metallicity for chemistry post-processing. 1.0 iline uppper level of CO rotational line. 1 for J=1-0, 2 for J=2-1 1 Tdect detection limit for atenna temperature in K for each velocity channel. 0.0 Source code in astro_tigress/tigress_read.py 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 def load ( self , ivtk , dataset = \"MHD\" , Z = 1. , iline = 1 , Tdect = 0. ): \"\"\"Load simulation data from a certain data set. Parameters ---------- ivtk: int vtk output number dataset: str or list, [\"MHD\", \"chem\", \"CO_lines\", \"MHD_PI\", \"all\"] name of the dataset or load all. Z: float, [0.5, 1, 2] metallicity for chemistry post-processing. iline: int, [1, 2] uppper level of CO rotational line. 1 for J=1-0, 2 for J=2-1 Tdect: float detection limit for atenna temperature in K for each velocity channel. \"\"\" fn = self . _set_filename ( ivtk , Z = Z , iline = iline , add_master = True ) if dataset == \"all\" : for d in self . data_sets [ ivtk ]: self . _loadone ( fn [ d ], d , iline = iline , Tdect = Tdect ) else : for d in np . atleast_1d ( dataset ): self . _loadone ( fn [ d ], d , iline = iline , Tdect = Tdect )","title":"load()"},{"location":"module/#astro_tigress.tigress_read.Model.show","text":"Print available data list Source code in astro_tigress/tigress_read.py 63 64 65 66 67 68 69 70 71 72 73 74 def show ( self ): \"\"\"Print available data list\"\"\" print ( \"Avalable data:\" ) if hasattr ( self , 'fn_hst' ): print ( \" history\" ) if hasattr ( self , 'fn_input_MHD' ): print ( \" input\" ) for i in self . ivtks : print ( \" ivtk = {:d} \" . format ( i ), end = \" \" ) for d in self . data_sets [ i ]: print ( d , end = \" \" ) print ( \" \" )","title":"show()"}]}